// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tik_A_Ticket.Data;

#nullable disable

namespace Tik_A_Ticket.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220908105420_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChampionShipTeam", b =>
                {
                    b.Property<int>("ChampionShipsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("ChampionShipsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("ChampionShipTeam");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.ChampionShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChampionShips");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Fan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FanId")
                        .HasColumnType("bigint");

                    b.Property<int?>("FanTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoutritePlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("RegesteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FanTicketId");

                    b.HasIndex("FavoutritePlayerId");

                    b.ToTable("Fans");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Match", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int?>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("StadiumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerAge")
                        .HasColumnType("int");

                    b.Property<byte[]>("PlayerImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PlayerNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.Property<int>("PlayerPosition")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.PricingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PricingCategories");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Capacity")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FanId")
                        .HasColumnType("int");

                    b.Property<int>("LeagueOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FanId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<int?>("PricingId")
                        .HasColumnType("int");

                    b.Property<int?>("SeatNo")
                        .HasColumnType("int");

                    b.Property<long>("TicketNumber")
                        .HasColumnType("bigint");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PricingId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ChampionShipTeam", b =>
                {
                    b.HasOne("Tik_A_Ticket.Models.ChampionShip", null)
                        .WithMany()
                        .HasForeignKey("ChampionShipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tik_A_Ticket.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Fan", b =>
                {
                    b.HasOne("Tik_A_Ticket.Models.Ticket", "FanTicket")
                        .WithMany()
                        .HasForeignKey("FanTicketId");

                    b.HasOne("Tik_A_Ticket.Models.Player", "FavoutritePlayer")
                        .WithMany()
                        .HasForeignKey("FavoutritePlayerId");

                    b.Navigation("FanTicket");

                    b.Navigation("FavoutritePlayer");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Match", b =>
                {
                    b.HasOne("Tik_A_Ticket.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId");

                    b.HasOne("Tik_A_Ticket.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId");

                    b.HasOne("Tik_A_Ticket.Models.Stadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Player", b =>
                {
                    b.HasOne("Tik_A_Ticket.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Team", b =>
                {
                    b.HasOne("Tik_A_Ticket.Models.Fan", null)
                        .WithMany("FanTeams")
                        .HasForeignKey("FanId");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Ticket", b =>
                {
                    b.HasOne("Tik_A_Ticket.Models.Match", "Match")
                        .WithMany("Tickets")
                        .HasForeignKey("MatchId");

                    b.HasOne("Tik_A_Ticket.Models.PricingCategory", "Pricing")
                        .WithMany()
                        .HasForeignKey("PricingId");

                    b.Navigation("Match");

                    b.Navigation("Pricing");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Fan", b =>
                {
                    b.Navigation("FanTeams");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Match", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Tik_A_Ticket.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
